version: "2.3"
services:
  portfolio-redis:
    image: redis:6.2-alpine
    container_name: portfolio-redis
    volumes:
      - ./dockerdata/redis/data:/data
    networks:
      - portfolionet
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      start_period: 60s
      interval: 60s
    command: redis-server --appendonly yes

  portfolio-postgres:
    image: postgres:11-alpine
    container_name: portfolio-postgres
    environment:
      - POSTGRES_PASSWORD=$PORTFOLIO_DB_PASSWORD
      - POSTGRES_USER=$PORTFOLIO_DB_USER
      - POSTGRES_DB=$PORTFOLIO_DB_NAME
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./dockerdata/postgres/11/data:/var/lib/postgresql/data/pgdata
    networks:
      - portfolionet
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      start_period: 60s
      interval: 60s

  portfolio-django:
    build: ./src
    image: portfolio-django
    container_name: portfolio-django
    environment:
      - POSTGRES_PASSWORD=$PORTFOLIO_DB_PASSWORD
      - POSTGRES_USER=$PORTFOLIO_DB_USER
      - POSTGRES_DB=$PORTFOLIO_DB_NAME
    expose:
      - 8200
    volumes:
      - ./src:/django
      - ./docs/build:/docs/build
      - ./logs:/logs
      - $PORTFOLIO_ASSETS:/django/assets
      - ./docker/imagemagick/policy.xml:/etc/ImageMagick-6/policy.xml
    networks:
      - portfolionet
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8200/health || exit 1"]
      start_period: 60s
      interval: 60s
    depends_on:
      - portfolio-postgres
      - portfolio-redis
      - portfolio-lool
      - portfolio-clamav

  portfolio-rq-worker-1:
    build: ./src
    image: portfolio-django
    container_name: portfolio-rq-worker-1
    environment:
      - POSTGRES_PASSWORD=$PORTFOLIO_DB_PASSWORD
      - POSTGRES_USER=$PORTFOLIO_DB_USER
      - POSTGRES_DB=$PORTFOLIO_DB_NAME
    volumes_from:
      - portfolio-django
    networks:
      - portfolionet
    restart: always
    depends_on:
      - portfolio-postgres
      - portfolio-redis
      - portfolio-lool
    command: python manage.py rqworker default

  portfolio-rq-worker-2:
    build: ./src
    image: portfolio-django
    container_name: portfolio-rq-worker-2
    environment:
      - POSTGRES_PASSWORD=$PORTFOLIO_DB_PASSWORD
      - POSTGRES_USER=$PORTFOLIO_DB_USER
      - POSTGRES_DB=$PORTFOLIO_DB_NAME
    volumes_from:
      - portfolio-django
    networks:
      - portfolionet
    restart: always
    depends_on:
      - portfolio-postgres
      - portfolio-redis
      - portfolio-lool
    command: python manage.py rqworker high default

  portfolio-rq-worker-3:
    build: ./src
    image: portfolio-django
    container_name: portfolio-rq-worker-3
    environment:
      - POSTGRES_PASSWORD=$PORTFOLIO_DB_PASSWORD
      - POSTGRES_USER=$PORTFOLIO_DB_USER
      - POSTGRES_DB=$PORTFOLIO_DB_NAME
    volumes_from:
      - portfolio-django
    networks:
      - portfolionet
    restart: always
    depends_on:
      - portfolio-postgres
      - portfolio-redis
      - portfolio-lool
    command: python manage.py rqworker high video default

  portfolio-rq-scheduler:
    build: ./src
    image: portfolio-django
    container_name: portfolio-rq-scheduler
    environment:
      - POSTGRES_PASSWORD=$PORTFOLIO_DB_PASSWORD
      - POSTGRES_USER=$PORTFOLIO_DB_USER
      - POSTGRES_DB=$PORTFOLIO_DB_NAME
    volumes_from:
      - portfolio-django
    networks:
      - portfolionet
    restart: always
    depends_on:
      - portfolio-postgres
      - portfolio-redis
      - portfolio-lool
    command: python manage.py rqscheduler

  portfolio-clamav:
    image: clamav/clamav:stable
    container_name: portfolio-clamav
    networks:
      - portfolionet
    restart: always

  portfolio-lool:
    image: collabora/code:4.2.3.1
    container_name: portfolio-lool
    volumes:
      - ./docker/loolwsd.xml:/etc/loolwsd/loolwsd.xml
    networks:
      - portfolionet
    restart: always

  portfolio-cron:
    image: paradoxon/alpine-cron
    container_name: portfolio-cron
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/cron/crontab:/tmp/crontab
    network_mode: "none"
    restart: always

networks:
  portfolionet:
